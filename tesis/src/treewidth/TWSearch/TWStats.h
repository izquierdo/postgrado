#ifndef TWSTATS_H_
#define TWSTATS_H_

#include "preproc_flags.h"
#include <vector>
#include <sstream>
#include <sys/types.h>

using namespace std;

namespace Treewidth_Namespace {

class TWStats {
private:
	int overts;
	int oedges;
	int rverts;
	int redges;
	int ub;
	int lb;

	int curr_nodes_val;
	int curr_mem_val;

	int max_nodes_val;
	int max_mem_val;

	vector<int> nodes;
	vector<int> mem;

public:
	TWStats();
	virtual ~TWStats();

	void addNode();
	void subNode();
	void subNodes(uint ndealloc);

	void setCurrMem(int mem_val);

	void setOrigVerts(int v);
	void setOrigEdges(int e);
	void setReducedVerts(int v);
	void setReducedEdges(int e);
	void setMinFillUB(int val);
	void setInitialLB(int val);
	int getInitialLB();

	int currNodes() const;
	int currMem() const;

	int maxNodes() const;
	int maxMem() const;

	int storedNodes(uint i) const;
	int storedMem(uint i) const;

	static string graphParamsLabelsString();
	string graphParamsString() const;

	bool isCurrNodes(int val) const;

	virtual void storeCurrs();
	virtual void outputStats(ostream &out) const =0;
	virtual void reset();
};

///////////////////////////////////////////////////////////////////////////////
// Default constructor
///////////////////////////////////////////////////////////////////////////////
inline TWStats::TWStats() :
	overts(0), oedges(0), rverts(0), redges(0), ub(0), lb(0),
			curr_nodes_val(0), curr_mem_val(0), max_nodes_val(0),
			max_mem_val(0) {
}

///////////////////////////////////////////////////////////////////////////////
// Destructor
///////////////////////////////////////////////////////////////////////////////
inline TWStats::~TWStats() {
}

///////////////////////////////////////////////////////////////////////////////
// addNode - called when another node is allocated
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::addNode() {
	curr_nodes_val++;
	if (curr_nodes_val>max_nodes_val)
		max_nodes_val=curr_nodes_val;
}

///////////////////////////////////////////////////////////////////////////////
// subNode - called when a node is deallocated
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::subNode() {
	curr_nodes_val--;
}

///////////////////////////////////////////////////////////////////////////////
// subNodes - called when a ndealloc nodes were deallocated
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::subNodes(uint ndealloc) {
	curr_nodes_val-=ndealloc;
}

///////////////////////////////////////////////////////////////////////////////
// setCurrMem - called to store current memory allocation
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::setCurrMem(int mem_val) {
	curr_mem_val=mem_val;
	if (curr_mem_val>max_mem_val)
		max_mem_val=curr_mem_val;
}

///////////////////////////////////////////////////////////////////////////////
// setOrigVerts
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::setOrigVerts(int v) {
	overts=v;
}

///////////////////////////////////////////////////////////////////////////////
// setOrigEdges
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::setOrigEdges(int e) {
	oedges=e;
}

///////////////////////////////////////////////////////////////////////////////
// setReducedVerts
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::setReducedVerts(int v) {
	rverts=v;
}

///////////////////////////////////////////////////////////////////////////////
// setReducedEdges
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::setReducedEdges(int e) {
	redges=e;
}

///////////////////////////////////////////////////////////////////////////////
// setMinFillUB
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::setMinFillUB(int val) {
	ub=val;
}

///////////////////////////////////////////////////////////////////////////////
// setInitialLB
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::setInitialLB(int val) {
	lb=val;
}

///////////////////////////////////////////////////////////////////////////////
// getInitialLB
///////////////////////////////////////////////////////////////////////////////
inline int TWStats::getInitialLB() {
	return lb;
}

///////////////////////////////////////////////////////////////////////////////
// currNodes - returns current node allocation stat
///////////////////////////////////////////////////////////////////////////////
inline int TWStats::currNodes() const {
	return curr_nodes_val;
}

///////////////////////////////////////////////////////////////////////////////
// currMem - returns current mem allocation stat
///////////////////////////////////////////////////////////////////////////////
inline int TWStats::currMem() const {
	return curr_mem_val;
}

///////////////////////////////////////////////////////////////////////////////
// maxNodes - returns max number of nodes allocated so far
///////////////////////////////////////////////////////////////////////////////
inline int TWStats::maxNodes() const {
	return max_nodes_val;
}

///////////////////////////////////////////////////////////////////////////////
// maxMem - returns max memory allocation so far
///////////////////////////////////////////////////////////////////////////////
inline int TWStats::maxMem() const {
	return max_mem_val;
}

///////////////////////////////////////////////////////////////////////////////
// storedNodes - returns the nodes allocated at the given timestep
///////////////////////////////////////////////////////////////////////////////
inline int TWStats::storedNodes(uint i) const {
	if (i<nodes.size())
		return nodes[i];
	return 0;
}

///////////////////////////////////////////////////////////////////////////////
// storedMem - returns the memory allocation at the given timestep
///////////////////////////////////////////////////////////////////////////////
inline int TWStats::storedMem(uint i) const {
	if (i<mem.size())
		return mem[i];
	return 0;
}

///////////////////////////////////////////////////////////////////////////////
// graphParamsLabelsString - returns a space-seperated string of labels for
// the graph parameters returns by graphParamsString()
///////////////////////////////////////////////////////////////////////////////
inline string TWStats::graphParamsLabelsString() {
	return "orig_verts orig_edges reduced_verts reduced_edges ub lb";
}

///////////////////////////////////////////////////////////////////////////////
// graphParamsString - returns the values for several graph parameters, labels
// come from graphParamsLabelsString
///////////////////////////////////////////////////////////////////////////////
inline string TWStats::graphParamsString() const {
	ostringstream str;
	str << overts << " " << oedges << " " << rverts << " " << redges << " "
			<< ub << " " << lb;
	return str.str();
}

inline bool TWStats::isCurrNodes(int val) const {
	return curr_nodes_val==val;
}

///////////////////////////////////////////////////////////////////////////////
// storeCurrs - archives the current allocation stats
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::storeCurrs() {
	nodes.push_back(curr_nodes_val);
	nodes.push_back(curr_mem_val);
}

///////////////////////////////////////////////////////////////////////////////
// reset - resets all stats and clears stat archive
///////////////////////////////////////////////////////////////////////////////
inline void TWStats::reset() {
	overts=oedges=rverts=redges=ub=lb=0;
	curr_nodes_val=curr_mem_val=max_nodes_val=max_mem_val=0;
	nodes.clear();
	mem.clear();
}

}
;

#endif /*TWSTATS_H_*/
